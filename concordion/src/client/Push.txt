= Client:Push
:email: dchen@redhat.com
:revdate: 2013/01/31
:revnumber: 2.2

== attributes
:priority: P2
:status: CONFIRMED
:automated: 
:testplan_reference: Zanata-full
:categoryname: Functional
:component: 
:defaulttester: 
:role: projectMaintainer
:tag: 
:impact: High
:probability: Medium
:risk: 6
:taxonomy: 10200

== notes
Propose: Any project maintainer should be able to push 
the source files and translation files with
@client@.

=== Feature to Be Tested
* Authentication check.
* Assume zanata.xml is corrected and completed.
* Push Type both
* Push Type source
* Push All locales

=== Feature NOT to Be Tested
* Push Type trans
* Handle the incompleted zanata.xml
* Push Single locale.

== setup

=== Requires
* A project maintainer `@PROJMANT@` and a non-project maintainer `@NON_PROJMANT@`.
* API keys is generated for both users.
* $HOME/.config/zanana.ini is setup for the project maintainer.
* A created Project Id such as `@PROJ1@`.
* A created Version ID such as `@VER1@`
* A document project in type `@PROJTYPE1@`.
* zanata.xml is setup.

== action

In command line, do the following:

=== Non Project Maintainer Should Be Blocked
1. Non Project maintainer push with
`@CLIENT_CMD@ @CMD_PUSH@ @OPTION_URL@ @OPTION_USERNAME_NON_PROJMANT@ @OPTION_APIKEY_NON_PROJMANT@`
exp: Should FAIL with error message which states that user is not a project maintainer.

=== Project Maintainer
1. Create the version without any option:
`@CLIENT_CMD@ @CMD_VERSION_CREATE@`
exp: Should FAIL with error message which shows that URL, Project Id and Version ID are needed.
2. Create project with only URL and version ID.
`@CLIENT_CMD@ @CMD_VERSION_CREATE@ @OPTION_VER1@ @OPTION_URL@`
exp: Should FAIL with error message which shows that Project Id is needed.
3.  Create project with URL and version ID and project ID.
`@CLIENT_CMD@ @CMD_VERSION_CREATE@ @OPTION_VER1@ @OPTION_PROJ1@ @OPTION_URL@`
exp: Should success.


1. Create the project without name and description:
`@CLIENT_CMD@ @CMD_PROJECT_CREATE@`
exp: Should FAIL with error message which states that URL, project id, name, and description are needed.
2. Create the project with project name and description:
`@CLIENT_CMD@ @CMD_PROJECT_CREATE@ @OPTION_PROJ1@ @OPTION_NAME@ @OPTION_DESC@`
exp: Should FAIL with error message which states that URL, username and apikey are needed.
$$$$
+
3. Create project with only URL, username and wrong APIKEY:
`@CLIENT_CMD@ @CMD_PROJECT_CREATE@ @OPTION_PROJ1@ @OPTION_NAME@ @OPTION_DESC@ @OPTION_URL@
@OPTION_USERNAME@ @OPTION_APIKEY_WRONG@`
exp: Should FAIL with error message show that either url, username or API key is wrong.
4. Create project with only URL and username and correct APIKEY:
`@CLIENT_CMD@ @CMD_PROJECT_CREATE@ @OPTION_PROJ1@ @OPTION_NAME@ @OPTION_DESC@ @OPTION_URL@
@OPTION_USERNAME@` `@OPTION_APIKEY@`
exp: Should success.
5. Back to Web page *My Profile*.
6. Copy the *Configuration [zanata.ini]* and paste to
`$HOME/.config/zanana.ini`
7. Create the project again without specifying username and API
`@CLIENT_CMD@ @CMD_PROJECT_CREATE@ @OPTION_PROJ1@ @OPTION_NAME@ @OPTION_DESC@ @OPTION_URL@`
exp: Should success.


== expectedresults
Proceed as described in Action.

== breakdown


// vim: set syntax=asciidoc:

